generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // atau sqlite
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  password       String
  projectsOwned  Project[]        @relation("OwnerProjects")
  memberProjects ProjectMember[]
  tasksAssigned  Task[]           @relation("AssignedTasks")
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}


model Project {
  id         String           @id @default(uuid())
  name       String
  description String?
  owner      User             @relation("OwnerProjects", fields: [ownerId], references: [id])
  ownerId    String
  members    ProjectMember[]
  tasks      Task[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

enum MemberRole {
  OWNER
  MEMBER
}

model ProjectMember {
  id         String      @id @default(uuid())
  project    Project     @relation(fields: [projectId], references: [id])
  projectId  String
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  role       MemberRole  @default(MEMBER)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([projectId, userId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Task {
  id         String     @id @default(uuid())
  title      String
  description String?
  status     TaskStatus @default(TODO)
  project    Project    @relation(fields: [projectId], references: [id])
  projectId  String
  assignee   User?      @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?    
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
